#include <ESP8266WiFi.h>
#include <PubSubClient.h>
 
const char* ssid = "70 Kenwell 2.4GHz";
const char* password =  "k2fd4312";
const char* mqttServer = "192.168.1.32";
const int mqttPort = 1883;
const char* mqttUser = "fzecca";
const char* mqttPassword = "Nemesis1";
 
WiFiClient espClient;
PubSubClient client(espClient);

//const char* topic = "temp";



#include <SPI.h>
#include "Adafruit_MAX31855.h"

// Default connection is using software SPI, but comment and uncomment one of
// the two examples below to switch between software SPI and hardware SPI:

// Example creating a thermocouple instance with software SPI on any three
// digital IO pins.
#define MAXDO   12   //Wemos D1 Mini pin D6
#define MAXCS   16   //Wemos D1 Mini pin D0
#define MAXCLK  14   //Wemos D1 Mini pin D5

// initialize the Thermocouple
Adafruit_MAX31855 thermocouple(MAXCLK, MAXCS, MAXDO);

// Example creating a thermocouple instance with hardware SPI
// on a given CS pin.
//#define MAXCS   10
//Adafruit_MAX31855 thermocouple(MAXCS);

//setup Outputs
int out0_pin = 15;
int out1_pin = 13;

//setup Inputs
int in0_pin = 4;
int in1_pin = 0;
//int in2_pin = 2;  Unavailable on ver 1.1 boards

//setup LED wiring
int led_pin = 5;
//int led_pin = 13;


char* inTopic = "";
//String inPayload = "";
//byte* inPayload;      //
unsigned int length;

char* outTopic = "";
String outPayload = "";

boolean in0_currentState =false;
boolean in0_lastState = false;
boolean in1_currentState =false;
boolean in1_lastState = false;
boolean in2_currentState =false;
boolean in2_lastState = false;

boolean ledState = false;

unsigned long lastTime =0; 
unsigned long currentTime =0;
int publishInterval = 3000;  //number of milliseconds for periodic publish commands

void setup() {
  pinMode(out0_pin, OUTPUT); 
  pinMode(out1_pin, OUTPUT); 
  pinMode(led_pin, OUTPUT);
  pinMode(in0_pin, INPUT);
  pinMode(in1_pin, INPUT);
  pinMode(in2_pin, INPUT);

  
  Serial.begin(115200);
 
  WiFi.begin(ssid, password);
 
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.println("Connecting to WiFi..");
  }
  Serial.println("Connected to the WiFi network");
 
  client.setServer(mqttServer, mqttPort);
  client.setCallback(callback);
 
  while (!client.connected()) {
    Serial.println("Connecting to MQTT...");
 
    if (client.connect("ESP8266Client", mqttUser, mqttPassword )) {
 
      Serial.println("connected");  
 
    } else {
 
      Serial.print("failed with state ");
      Serial.print(client.state());
      delay(2000);
 
    }
  }
 
  client.publish("esp/test", "Hello from ESP8266");
  client.subscribe("esp/test");
  client.subscribe("outputs/out0");
  client.subscribe("outputs/out1");


//Max31855 Setup
//  Serial.begin(9600);

  while (!Serial) delay(1); // wait for Serial on Leonardo/Zero, etc

  Serial.println("MAX31855 test");
  // wait for MAX chip to stabilize
  delay(500);

  //Motor wiring test
  digitalWrite(led_pin, HIGH);
  delay(500);
  digitalWrite(led_pin, LOW);
}

void callback(char* inTopic, byte* inPayload, unsigned int length) {
 
  Serial.print("Message arrived in topic: ");
  Serial.println(inTopic);

  Serial.print("Message length: ");
  Serial.println(length);
 
  Serial.print("Message:");
  for (int i = 0; i < length; i++) {
    Serial.print((char)inPayload[i]);
//      Serial.print(payload);
  }
 
  Serial.println();
  Serial.println("-----------------------");
  /*
  if (payload[0] == '1'){
    digitalWrite(motorA_pin, HIGH); 
  }else{digitalWrite(motorA_pin, LOW);
  }
  */
  if (strcmp(inTopic,"outputs/out0")==0){
    if (inPayload[0] == '1'){
      digitalWrite(out0_pin, HIGH);
      Serial.print(inTopic); 
    }else{
      digitalWrite(out0_pin, LOW);}
  }else if (strcmp(inTopic,"outputs/out1")==0){
    if (inPayload[0] == '1'){
      ledState = true;    //force synchronization of the ledState variable with the MQTT switch
      digitalWrite(led_pin, HIGH); 
      Serial.print(inTopic);
    }else{ledState = false;    //force synchronization of the ledState variable with the MQTT switch
      digitalWrite(led_pin, LOW);
    }  
  }
return;  
}
 
void loop() {
  client.loop();

  currentTime = millis();
//From Max31855
  // basic readout test, just print the current temp
   //Serial.print("Internal Temp = ");
  // Serial.println(thermocouple.readInternal());

  if(currentTime-lastTime >= publishInterval){
    double temp = thermocouple.readCelsius();
    if (isnan(temp)) {
      Serial.println("Something wrong with thermocouple!");
    } else {
      Serial.print("C = ");
      Serial.println(temp);
      outTopic = "temp";
      outPayload = String(temp);
      if (client.publish(outTopic, (char*) outPayload.c_str())){
        Serial.println("Publish ok");
        Serial.println(outTopic);
        lastTime = currentTime;
      }else {
        Serial.println("Publish failed");
      }
    }
   //Serial.print("F = ");
   //Serial.println(thermocouple.readFahrenheit());
  }
   
  in0_currentState = digitalRead(in0_pin);
  if(in0_currentState != in0_lastState){
    outTopic = "inputs/in0";

    if(in0_currentState == true){
      ledState = !ledState;
      outPayload = String(ledState);
      Serial.println ("Button Pressed!!!");
      Serial.println ("Payload: ");
      Serial.print (ledState);
      Serial.print ("/");
      Serial.print (outPayload);
      Serial.print("/");
        if (client.publish(outTopic, (char*) outPayload.c_str())){
          Serial.println("Publish ok");
        }else {
          Serial.println("Publish failed");
        }
    }else{    //outPayload = "0";
      Serial.println ("Button Released!!!");
    }
    in0_lastState = in0_currentState;   
  }
  delay(100);
}
